parameters:
- name: windowsPool
  type: object
  default:
    vmImage: windows-2022
- name: ShouldSkipOptimize
- name: includeMacOS
- name: OptProf
  default: false
- name: RunTests
  type: boolean
  default: true
- name: EnableCompliance
  type: boolean
  default: true
- name: EnableAPIScan
  type: boolean
  default: true

jobs:
- job: Windows
  pool: ${{ parameters.windowsPool }}
  timeoutInMinutes: 180 # Give plenty of time due to real signing
  variables:
  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    # https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/25351/APIScan-step-by-step-guide-to-setting-up-a-Pipeline
    - group: VSExtensibility-APIScan # Expected to provide ApiScanClientId, ApiScanSecret, ApiScanTenant
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true

  - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
    - template: schedule-only-steps.yml

  - template: install-dependencies.yml

  - powershell: '& (./azure-pipelines/Get-nbgv.ps1) cloud -ca'
    displayName: âš™ Set build number

  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    - template: microbuild.before.yml
      parameters:
        ShouldSkipOptimize: ${{ parameters.ShouldSkipOptimize }}

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}

  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    - template: microbuild.after.yml
      parameters:
        OptProf: ${{ parameters.OptProf }}
        EnableCompliance: ${{ parameters.EnableCompliance }}
        EnableAPIScan: ${{ parameters.EnableAPIScan }}
    # Repeat this step to scoop up any artifacts that would only be collected after running microbuild.after.yml
    - powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)"
      failOnStderr: true
      displayName: Publish artifacts
      condition: succeededOrFailed()

- ${{ if ne(parameters.OptProf, 'true') }}:
  - job: Linux
    pool:
      vmImage: Ubuntu 20.04
    steps:
    - checkout: self
      fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
      clean: true
    - template: install-dependencies.yml
    - template: dotnet.yml
      parameters:
        RunTests: ${{ parameters.RunTests }}

  - job: macOS
    condition: ${{ parameters.includeMacOS }}
    pool:
      vmImage: macOS-12
    steps:
    - checkout: self
      fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
      clean: true
    - template: install-dependencies.yml
    - template: dotnet.yml
      parameters:
        RunTests: ${{ parameters.RunTests }}

  - job: WrapUp
    dependsOn:
    - Windows
    - Linux
    - macOS
    pool: ${{ parameters.windowsPool }} # Use Windows agent because PublishSymbols task requires it (https://github.com/microsoft/azure-pipelines-tasks/issues/13821).
    condition: succeededOrFailed()
    steps:
    - checkout: self
      fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
      clean: true
    - template: install-dependencies.yml
      parameters:
        initArgs: -NoRestore
    - template: publish-symbols.yml
      parameters:
        includeMacOS: ${{ parameters.includeMacOS }}
    - ${{ if parameters.RunTests }}:
      - template: publish-codecoverage.yml
        parameters:
          includeMacOS: ${{ parameters.includeMacOS }}
