// <auto-generated/>

#nullable enable

namespace StreamJsonRpc.Generated;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("StreamJsonRpc.Analyzers", "x.x.x.x")]
internal class IMyService2_Proxy : global::StreamJsonRpc.Reflection.ProxyBase
	, global::IMyService2
{
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> Task1PositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(string),
	};
	
	private string? transformedTask11;
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> Task2PositionalArgumentDeclaredTypes2 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(string),
	};
	
	private string? transformedTask22;
	
	public IMyService2_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.JsonRpcProxyOptions? options, long? marshaledObjectHandle, global::System.Action? onDispose)
	    : base(client, options, marshaledObjectHandle, onDispose)
	{
	}
	
	global::System.Threading.Tasks.Task global::IMyService.Task1(string name)
	{
		if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
		
		this.OnCallingMethod("Task1");
		string rpcMethodName = this.transformedTask11 ??= this.Options.MethodNameTransform("Task1");
		global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
		    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, new Task1NamedArgs1(name), null, default) :
		    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [name], Task1PositionalArgumentDeclaredTypes1, default);
		this.OnCalledMethod("Task1");
		
		return result;
	}
	
	global::System.Threading.Tasks.Task global::IMyService2.Task2(string color)
	{
		if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
		
		this.OnCallingMethod("Task2");
		string rpcMethodName = this.transformedTask22 ??= this.Options.MethodNameTransform("Task2");
		global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
		    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, new Task2NamedArgs2(color), null, default) :
		    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [color], Task2PositionalArgumentDeclaredTypes2, default);
		this.OnCalledMethod("Task2");
		
		return result;
	}
	
	private readonly struct Task1NamedArgs1
	{
	    public Task1NamedArgs1(string name)
	    {
			this.name = name;
		}
		
		public readonly string name;
	}
	
	private readonly struct Task2NamedArgs2
	{
	    public Task2NamedArgs2(string color)
	    {
			this.color = color;
		}
		
		public readonly string color;
	}
}
