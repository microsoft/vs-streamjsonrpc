// <auto-generated/>

#nullable enable

[assembly: global::StreamJsonRpc.Reflection.RpcProxyMappingAttribute(typeof(global::IFoo), typeof(global::StreamJsonRpc.Proxies.IFoo_Proxy))]

namespace StreamJsonRpc.Proxies;

internal class IFoo_Proxy : global::IFoo, global::StreamJsonRpc.IJsonRpcClientProxyInternal
{
	private readonly global::StreamJsonRpc.JsonRpc client;
	private readonly global::StreamJsonRpc.JsonRpcProxyOptions options;
	private readonly global::System.Action? onDispose;
	private readonly long? marshaledObjectHandle;
	
	private global::System.EventHandler<string>? callingMethod;
	private global::System.EventHandler<string>? calledMethod;
	private bool disposed;
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> DisposeNamedArgumentDeclaredTypes1 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> DisposePositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
	{
	};
	public IFoo_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.JsonRpcProxyOptions options, long? marshaledObjectHandle, global::System.Action? onDispose)
	{
	    this.client = client ?? throw new global::System.ArgumentNullException(nameof(client));
	    this.options = options ?? throw new global::System.ArgumentNullException(nameof(options));
	    this.marshaledObjectHandle = marshaledObjectHandle;
	    this.onDispose = onDispose;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.IJsonRpcClientProxyInternal.CallingMethod
	{
	    add => this.callingMethod += value;
	    remove => this.callingMethod -= value;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.IJsonRpcClientProxyInternal.CalledMethod
	{
	    add => this.calledMethod += value;
	    remove => this.calledMethod -= value;
	}
	
	global::StreamJsonRpc.JsonRpc global::StreamJsonRpc.IJsonRpcClientProxy.JsonRpc => this.client;
	
	bool global::Microsoft.IDisposableObservable.IsDisposed => this.disposed;
	
	long? global::StreamJsonRpc.IJsonRpcClientProxyInternal.MarshaledObjectHandle => this.marshaledObjectHandle;
	
	void global::System.IDisposable.Dispose()
	{
	    if (this.disposed)
	    {
	        return;
	    }
	    this.disposed = true;
	
	    if (this.onDispose is not null)
	    {
	        this.onDispose();
	    }
	    else
	    {
	        client.Dispose();
	    }
	}
	
	public global::System.Threading.Tasks.Task Dispose()
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IFoo_Proxy));
	
	    this.callingMethod?.Invoke(this, "Dispose");
	    string rpcMethodName = this.options.MethodNameTransform("Dispose");
	    global::System.Threading.Tasks.Task result = this.options.ServerRequiresNamedArguments ?
	        this.client.InvokeWithParameterObjectAsync(rpcMethodName, new DisposeNamedArgs1(), DisposeNamedArgumentDeclaredTypes1, default) :
	        this.client.InvokeWithCancellationAsync(rpcMethodName, [], DisposePositionalArgumentDeclaredTypes1, default);
	    this.calledMethod?.Invoke(this, "Dispose");
	
	    return result;
	}
	
	private readonly struct DisposeNamedArgs1
	{
	    public DisposeNamedArgs1()
	    {
		}
	}
}
