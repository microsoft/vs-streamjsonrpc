// <auto-generated/>

#nullable enable
#pragma warning disable CS0436 // prefer local types to imported ones

namespace StreamJsonRpc.Generated
{
	
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("StreamJsonRpc.Analyzers", "x.x.x.x")]
	internal class B_IMyRpc_Proxy : global::StreamJsonRpc.Reflection.ProxyBase
		, global::B.IMyRpc
	{
		
		private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> JustAnotherCancellationAsyncNamedArgumentDeclaredTypes1 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
		{
		};
		
		private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> JustAnotherCancellationAsyncPositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
		{
		};
		
		private string? transformedJustAnotherCancellationAsync1;
		
		public B_IMyRpc_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.Reflection.ProxyInputs inputs)
		    : base(client, inputs)
		{
		}
		
		global::System.Threading.Tasks.Task global::B.IMyRpc.JustAnotherCancellationAsync(global::System.Threading.CancellationToken cancellationToken)
		{
			if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
			
			this.OnCallingMethod("JustAnotherCancellationAsync");
			string rpcMethodName = this.transformedJustAnotherCancellationAsync1 ??= this.Options.MethodNameTransform("JustAnotherCancellationAsync");
			global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
			    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, ConstructNamedArgs(), JustAnotherCancellationAsyncNamedArgumentDeclaredTypes1, cancellationToken) :
			    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [], JustAnotherCancellationAsyncPositionalArgumentDeclaredTypes1, cancellationToken);
			this.OnCalledMethod("JustAnotherCancellationAsync");
			
			return result;
			
			global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
			    => new()
			    {
				};
		}
	}
}
