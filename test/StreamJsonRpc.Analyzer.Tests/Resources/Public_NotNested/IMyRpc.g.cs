// <auto-generated/>

#nullable enable

[assembly: global::StreamJsonRpc.Reflection.RpcProxyMappingAttribute(typeof(global::IMyRpc), typeof(global::StreamJsonRpc.Proxies.IMyRpc_Proxy))]

namespace StreamJsonRpc.Proxies;

internal class IMyRpc_Proxy : global::IMyRpc, global::StreamJsonRpc.IJsonRpcClientProxyInternal
{
	private readonly global::StreamJsonRpc.JsonRpc client;
	private readonly global::StreamJsonRpc.JsonRpcProxyOptions options;
	private readonly global::System.Action? onDispose;
	private readonly long? marshaledObjectHandle;
	
	private global::System.EventHandler<string>? callingMethod;
	private global::System.EventHandler<string>? calledMethod;
	private bool disposed;
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> JustCancellationAsyncNamedArgumentDeclaredTypes1 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> JustCancellationAsyncPositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
	{
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> AnArgAndCancellationAsyncNamedArgumentDeclaredTypes2 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["arg"] = typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> AnArgAndCancellationAsyncPositionalArgumentDeclaredTypes2 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> AddAsyncNamedArgumentDeclaredTypes3 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["a"] = typeof(int),
		["b"] = typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> AddAsyncPositionalArgumentDeclaredTypes3 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(int),
		typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> MultiplyAsyncNamedArgumentDeclaredTypes4 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["a"] = typeof(int),
		["b"] = typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> MultiplyAsyncPositionalArgumentDeclaredTypes4 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(int),
		typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> StartNamedArgumentDeclaredTypes5 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["bah"] = typeof(string),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> StartPositionalArgumentDeclaredTypes5 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(string),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> StartCancelableNamedArgumentDeclaredTypes6 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["bah"] = typeof(string),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> StartCancelablePositionalArgumentDeclaredTypes6 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(string),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> CountAsyncNamedArgumentDeclaredTypes7 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["start"] = typeof(int),
		["count"] = typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> CountAsyncPositionalArgumentDeclaredTypes7 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(int),
		typeof(int),
	};
	public IMyRpc_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.JsonRpcProxyOptions options, long? marshaledObjectHandle, global::System.Action? onDispose)
	{
	    this.client = client ?? throw new global::System.ArgumentNullException(nameof(client));
	    this.options = options ?? throw new global::System.ArgumentNullException(nameof(options));
	    this.marshaledObjectHandle = marshaledObjectHandle;
	    this.onDispose = onDispose;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.IJsonRpcClientProxyInternal.CallingMethod
	{
	    add => this.callingMethod += value;
	    remove => this.callingMethod -= value;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.IJsonRpcClientProxyInternal.CalledMethod
	{
	    add => this.calledMethod += value;
	    remove => this.calledMethod -= value;
	}
	
	global::StreamJsonRpc.JsonRpc global::StreamJsonRpc.IJsonRpcClientProxy.JsonRpc => this.client;
	
	bool global::Microsoft.IDisposableObservable.IsDisposed => this.disposed;
	
	long? global::StreamJsonRpc.IJsonRpcClientProxyInternal.MarshaledObjectHandle => this.marshaledObjectHandle;
	
	void global::System.IDisposable.Dispose()
	{
	    if (this.disposed)
	    {
	        return;
	    }
	    this.disposed = true;
	
	    if (this.onDispose is not null)
	    {
	        this.onDispose();
	    }
	    else
	    {
	        client.Dispose();
	    }
	}
	
	public global::System.Threading.Tasks.Task JustCancellationAsync(global::System.Threading.CancellationToken cancellationToken)
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IMyRpc_Proxy));
	
	    this.callingMethod?.Invoke(this, "JustCancellationAsync");
	    string rpcMethodName = this.options.MethodNameTransform("JustCancellationAsync");
	    global::System.Threading.Tasks.Task result = this.options.ServerRequiresNamedArguments ?
	        this.client.InvokeWithParameterObjectAsync(rpcMethodName, new JustCancellationAsyncNamedArgs1(), JustCancellationAsyncNamedArgumentDeclaredTypes1, cancellationToken) :
	        this.client.InvokeWithCancellationAsync(rpcMethodName, [], JustCancellationAsyncPositionalArgumentDeclaredTypes1, cancellationToken);
	    this.calledMethod?.Invoke(this, "JustCancellationAsync");
	
	    return result;
	}
	
	public global::System.Threading.Tasks.ValueTask AnArgAndCancellationAsync(int arg, global::System.Threading.CancellationToken cancellationToken)
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IMyRpc_Proxy));
	
	    this.callingMethod?.Invoke(this, "AnArgAndCancellationAsync");
	    string rpcMethodName = this.options.MethodNameTransform("AnArgAndCancellationAsync");
	    global::System.Threading.Tasks.Task result = this.options.ServerRequiresNamedArguments ?
	        this.client.InvokeWithParameterObjectAsync(rpcMethodName, new AnArgAndCancellationAsyncNamedArgs2(arg), AnArgAndCancellationAsyncNamedArgumentDeclaredTypes2, cancellationToken) :
	        this.client.InvokeWithCancellationAsync(rpcMethodName, [arg], AnArgAndCancellationAsyncPositionalArgumentDeclaredTypes2, cancellationToken);
	    this.calledMethod?.Invoke(this, "AnArgAndCancellationAsync");
	
	    return new global::System.Threading.Tasks.ValueTask(result);
	}
	
	public global::System.Threading.Tasks.Task<int> AddAsync(int a, int b, global::System.Threading.CancellationToken cancellationToken)
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IMyRpc_Proxy));
	
	    this.callingMethod?.Invoke(this, "AddAsync");
	    string rpcMethodName = this.options.MethodNameTransform("AddAsync");
	    global::System.Threading.Tasks.Task<int> result = this.options.ServerRequiresNamedArguments ?
	        this.client.InvokeWithParameterObjectAsync<int>(rpcMethodName, new AddAsyncNamedArgs3(a, b), AddAsyncNamedArgumentDeclaredTypes3, cancellationToken) :
	        this.client.InvokeWithCancellationAsync<int>(rpcMethodName, [a, b], AddAsyncPositionalArgumentDeclaredTypes3, cancellationToken);
	    this.calledMethod?.Invoke(this, "AddAsync");
	
	    return result;
	}
	
	public global::System.Threading.Tasks.Task<int> MultiplyAsync(int a, int b)
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IMyRpc_Proxy));
	
	    this.callingMethod?.Invoke(this, "MultiplyAsync");
	    string rpcMethodName = this.options.MethodNameTransform("MultiplyAsync");
	    global::System.Threading.Tasks.Task<int> result = this.options.ServerRequiresNamedArguments ?
	        this.client.InvokeWithParameterObjectAsync<int>(rpcMethodName, new MultiplyAsyncNamedArgs4(a, b), MultiplyAsyncNamedArgumentDeclaredTypes4, default) :
	        this.client.InvokeWithCancellationAsync<int>(rpcMethodName, [a, b], MultiplyAsyncPositionalArgumentDeclaredTypes4, default);
	    this.calledMethod?.Invoke(this, "MultiplyAsync");
	
	    return result;
	}
	
	public void Start(string bah)
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IMyRpc_Proxy));
	
	    this.callingMethod?.Invoke(this, "Start");
	    string rpcMethodName = this.options.MethodNameTransform("Start");
	    global::System.Threading.Tasks.Task result = this.options.ServerRequiresNamedArguments ?
	        this.client.NotifyWithParameterObjectAsync(rpcMethodName, new StartNamedArgs5(bah), StartNamedArgumentDeclaredTypes5) :
	        this.client.NotifyAsync(rpcMethodName, [bah], StartPositionalArgumentDeclaredTypes5);
	    this.calledMethod?.Invoke(this, "Start");
	
	    return ;
	}
	
	public void StartCancelable(string bah, global::System.Threading.CancellationToken token)
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IMyRpc_Proxy));
	
	    this.callingMethod?.Invoke(this, "StartCancelable");
	    string rpcMethodName = this.options.MethodNameTransform("StartCancelable");
	    global::System.Threading.Tasks.Task result = this.options.ServerRequiresNamedArguments ?
	        this.client.NotifyWithParameterObjectAsync(rpcMethodName, new StartCancelableNamedArgs6(bah), StartCancelableNamedArgumentDeclaredTypes6) :
	        this.client.NotifyAsync(rpcMethodName, [bah], StartCancelablePositionalArgumentDeclaredTypes6);
	    this.calledMethod?.Invoke(this, "StartCancelable");
	
	    return ;
	}
	
	public global::System.Collections.Generic.IAsyncEnumerable<int> CountAsync(int start, int count, global::System.Threading.CancellationToken cancellationToken)
	{
	    if (this.disposed) throw new global::System.ObjectDisposedException(nameof(IMyRpc_Proxy));
	
	    this.callingMethod?.Invoke(this, "CountAsync");
	    string rpcMethodName = this.options.MethodNameTransform("CountAsync");
	    global::System.Threading.Tasks.Task<global::System.Collections.Generic.IAsyncEnumerable<int>> result = this.options.ServerRequiresNamedArguments ?
	        this.client.InvokeWithParameterObjectAsync<global::System.Collections.Generic.IAsyncEnumerable<int>>(rpcMethodName, new CountAsyncNamedArgs7(start, count), CountAsyncNamedArgumentDeclaredTypes7, cancellationToken) :
	        this.client.InvokeWithCancellationAsync<global::System.Collections.Generic.IAsyncEnumerable<int>>(rpcMethodName, [start, count], CountAsyncPositionalArgumentDeclaredTypes7, cancellationToken);
	    this.calledMethod?.Invoke(this, "CountAsync");
	
	    return global::StreamJsonRpc.Reflection.CodeGenHelpers.CreateAsyncEnumerableProxy(result, cancellationToken);
	}
	
	private readonly struct JustCancellationAsyncNamedArgs1
	{
	    public JustCancellationAsyncNamedArgs1()
	    {
		}
	}
	
	private readonly struct AnArgAndCancellationAsyncNamedArgs2
	{
	    public AnArgAndCancellationAsyncNamedArgs2(int arg)
	    {
			this.arg = arg;
		}
		
		public int arg { get; }
	}
	
	private readonly struct AddAsyncNamedArgs3
	{
	    public AddAsyncNamedArgs3(int a, int b)
	    {
			this.a = a;
			this.b = b;
		}
		
		public int a { get; }
		
		public int b { get; }
	}
	
	private readonly struct MultiplyAsyncNamedArgs4
	{
	    public MultiplyAsyncNamedArgs4(int a, int b)
	    {
			this.a = a;
			this.b = b;
		}
		
		public int a { get; }
		
		public int b { get; }
	}
	
	private readonly struct StartNamedArgs5
	{
	    public StartNamedArgs5(string bah)
	    {
			this.bah = bah;
		}
		
		public string bah { get; }
	}
	
	private readonly struct StartCancelableNamedArgs6
	{
	    public StartCancelableNamedArgs6(string bah)
	    {
			this.bah = bah;
		}
		
		public string bah { get; }
	}
	
	private readonly struct CountAsyncNamedArgs7
	{
	    public CountAsyncNamedArgs7(int start, int count)
	    {
			this.start = start;
			this.count = count;
		}
		
		public int start { get; }
		
		public int count { get; }
	}
}
