// <auto-generated/>

#nullable enable

namespace StreamJsonRpc.Generated;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("StreamJsonRpc.Analyzers", "x.x.x.x")]
internal class IMyServiceZiHkAQOD_Proxy : global::StreamJsonRpc.Reflection.ProxyBase
	, global::IMyService
	, global::IMyService2
{
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> Task1NamedArgumentDeclaredTypes1 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["name"] = typeof(string),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> Task1PositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(string),
	};
	
	private string? transformedTask11;
	
	private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> Task1NamedArgumentDeclaredTypes2 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
	{
		["name"] = typeof(string),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> Task1PositionalArgumentDeclaredTypes2 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(string),
	};
	
	private string? transformedTask12;
	
	public IMyServiceZiHkAQOD_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.JsonRpcProxyOptions? options, long? marshaledObjectHandle, global::System.Action? onDispose)
	    : base(client, options, marshaledObjectHandle, onDispose)
	{
	}
	
	global::System.Threading.Tasks.Task global::IMyService.Task1(string name)
	{
		if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
		
		this.OnCallingMethod("Task1");
		string rpcMethodName = this.transformedTask11 ??= this.Options.MethodNameTransform("Task1");
		global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
		    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, ConstructNamedArgs(), Task1NamedArgumentDeclaredTypes1, default) :
		    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [name], Task1PositionalArgumentDeclaredTypes1, default);
		this.OnCalledMethod("Task1");
		
		return result;
		
		global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
		    => new()
		    {
				["name"] = name,
			};
	}
	
	global::System.Threading.Tasks.Task global::IMyService2.Task1(string name)
	{
		if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
		
		this.OnCallingMethod("Task1");
		string rpcMethodName = this.transformedTask12 ??= this.Options.MethodNameTransform("Task1");
		global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
		    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, ConstructNamedArgs(), Task1NamedArgumentDeclaredTypes2, default) :
		    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [name], Task1PositionalArgumentDeclaredTypes2, default);
		this.OnCalledMethod("Task1");
		
		return result;
		
		global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
		    => new()
		    {
				["name"] = name,
			};
	}
}
