// <auto-generated/>

#nullable enable

[assembly: global::StreamJsonRpc.Reflection.RpcProxyMappingAttribute(typeof(global::IFoo), typeof(global::StreamJsonRpc.Proxies.IFoo_Proxy))]

namespace StreamJsonRpc.Proxies;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("StreamJsonRpc.Analyzers", "2.23.62.48791")]
internal class IFoo_Proxy : global::IFoo, global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal
{
	private readonly global::StreamJsonRpc.JsonRpc client;
	private readonly global::StreamJsonRpc.JsonRpcProxyOptions options;
	private readonly global::System.Action? onDispose;
	private readonly long? marshaledObjectHandle;
	
	private global::System.EventHandler<string>? callingMethod;
	private global::System.EventHandler<string>? calledMethod;
	private bool disposed;
	public IFoo_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.JsonRpcProxyOptions options, long? marshaledObjectHandle, global::System.Action? onDispose)
	{
	    this.client = client ?? throw new global::System.ArgumentNullException(nameof(client));
	    this.options = options ?? throw new global::System.ArgumentNullException(nameof(options));
	    this.marshaledObjectHandle = marshaledObjectHandle;
	    this.onDispose = onDispose;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal.CallingMethod
	{
	    add => this.callingMethod += value;
	    remove => this.callingMethod -= value;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal.CalledMethod
	{
	    add => this.calledMethod += value;
	    remove => this.calledMethod -= value;
	}
	
	global::StreamJsonRpc.JsonRpc global::StreamJsonRpc.IJsonRpcClientProxy.JsonRpc => this.client;
	
	public bool IsDisposed => this.disposed || this.client.IsDisposed;
	
	long? global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal.MarshaledObjectHandle => this.marshaledObjectHandle;
	
	void global::System.IDisposable.Dispose()
	{
	    if (this.disposed)
	    {
	        return;
	    }
	    this.disposed = true;
	
	    if (this.onDispose is not null)
	    {
	        this.onDispose();
	    }
	    else
	    {
	        client.Dispose();
	    }
	}
}
