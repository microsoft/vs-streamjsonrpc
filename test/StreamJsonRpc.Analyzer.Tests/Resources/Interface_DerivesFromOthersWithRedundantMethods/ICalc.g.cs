// <auto-generated/>

#nullable enable

[assembly: global::StreamJsonRpc.Reflection.RpcProxyMappingAttribute(typeof(global::ICalc), typeof(global::StreamJsonRpc.Proxies.ICalc_Proxy))]

namespace StreamJsonRpc.Proxies;

internal class ICalc_Proxy : global::ICalc, global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal
{
	private readonly global::StreamJsonRpc.JsonRpc client;
	private readonly global::StreamJsonRpc.JsonRpcProxyOptions options;
	private readonly global::System.Action? onDispose;
	private readonly long? marshaledObjectHandle;
	
	private global::System.EventHandler<string>? callingMethod;
	private global::System.EventHandler<string>? calledMethod;
	private bool disposed;
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> AddAsyncPositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(int),
		typeof(int),
	};
	
	private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> AddAsyncPositionalArgumentDeclaredTypes2 = new global::System.Collections.Generic.List<global::System.Type>
	{
		typeof(int),
		typeof(int),
	};
	public ICalc_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.JsonRpcProxyOptions options, long? marshaledObjectHandle, global::System.Action? onDispose)
	{
	    this.client = client ?? throw new global::System.ArgumentNullException(nameof(client));
	    this.options = options ?? throw new global::System.ArgumentNullException(nameof(options));
	    this.marshaledObjectHandle = marshaledObjectHandle;
	    this.onDispose = onDispose;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal.CallingMethod
	{
	    add => this.callingMethod += value;
	    remove => this.callingMethod -= value;
	}
	
	event global::System.EventHandler<string> global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal.CalledMethod
	{
	    add => this.calledMethod += value;
	    remove => this.calledMethod -= value;
	}
	
	global::StreamJsonRpc.JsonRpc global::StreamJsonRpc.IJsonRpcClientProxy.JsonRpc => this.client;
	
	public bool IsDisposed => this.disposed || this.client.IsDisposed;
	
	long? global::StreamJsonRpc.Reflection.IJsonRpcClientProxyInternal.MarshaledObjectHandle => this.marshaledObjectHandle;
	
	void global::System.IDisposable.Dispose()
	{
	    if (this.disposed)
	    {
	        return;
	    }
	    this.disposed = true;
	
	    if (this.onDispose is not null)
	    {
	        this.onDispose();
	    }
	    else
	    {
	        client.Dispose();
	    }
	}
	
	global::System.Threading.Tasks.Task<int> global::ICalc1.AddAsync(int a, int b)
	{
		if (this.IsDisposed) throw new global::System.ObjectDisposedException(nameof(ICalc_Proxy));
		
		this.callingMethod?.Invoke(this, "AddAsync");
		string rpcMethodName = this.options.MethodNameTransform("AddAsync");
		global::System.Threading.Tasks.Task<int> result = this.options.ServerRequiresNamedArguments ?
		    this.client.InvokeWithParameterObjectAsync<int>(rpcMethodName, new AddAsyncNamedArgs1(a, b), null, default) :
		    this.client.InvokeWithCancellationAsync<int>(rpcMethodName, [a, b], AddAsyncPositionalArgumentDeclaredTypes1, default);
		this.calledMethod?.Invoke(this, "AddAsync");
		
		return result;
	}
	
	global::System.Threading.Tasks.Task<int> global::ICalc2.AddAsync(int a, int b)
	{
		if (this.IsDisposed) throw new global::System.ObjectDisposedException(nameof(ICalc_Proxy));
		
		this.callingMethod?.Invoke(this, "AddAsync");
		string rpcMethodName = this.options.MethodNameTransform("AddAsync");
		global::System.Threading.Tasks.Task<int> result = this.options.ServerRequiresNamedArguments ?
		    this.client.InvokeWithParameterObjectAsync<int>(rpcMethodName, new AddAsyncNamedArgs2(a, b), null, default) :
		    this.client.InvokeWithCancellationAsync<int>(rpcMethodName, [a, b], AddAsyncPositionalArgumentDeclaredTypes2, default);
		this.calledMethod?.Invoke(this, "AddAsync");
		
		return result;
	}
	
	private readonly struct AddAsyncNamedArgs1
	{
	    public AddAsyncNamedArgs1(int a, int b)
	    {
			this.a = a;
			this.b = b;
		}
		
		public readonly int a;
		
		public readonly int b;
	}
	
	private readonly struct AddAsyncNamedArgs2
	{
	    public AddAsyncNamedArgs2(int a, int b)
	    {
			this.a = a;
			this.b = b;
		}
		
		public readonly int a;
		
		public readonly int b;
	}
}
