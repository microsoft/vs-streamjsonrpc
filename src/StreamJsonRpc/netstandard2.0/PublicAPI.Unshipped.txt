override StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.ToString() -> string!
static StreamJsonRpc.JsonRpcProxyOptions.Default.get -> StreamJsonRpc.JsonRpcProxyOptions!
static StreamJsonRpc.NamedArgs.Create(System.Type! objectType, object? namedArgsObject) -> StreamJsonRpc.NamedArgs?
static StreamJsonRpc.NamedArgs.Create<T>(T? namedArgsObject) -> StreamJsonRpc.NamedArgs?
static StreamJsonRpc.Reflection.ProxyBase.CreateProxy(StreamJsonRpc.JsonRpc! jsonRpc, in StreamJsonRpc.Reflection.ProxyInputs proxyInputs, bool startOrFail) -> StreamJsonRpc.IJsonRpcClientProxy!
static StreamJsonRpc.Reflection.ProxyBase.TryCreateProxy(StreamJsonRpc.JsonRpc! jsonRpc, in StreamJsonRpc.Reflection.ProxyInputs proxyInputs, out StreamJsonRpc.IJsonRpcClientProxy? proxy) -> bool
static StreamJsonRpc.RpcTargetMetadata.ClassAndInterfaces.Create(System.Type! classType) -> StreamJsonRpc.RpcTargetMetadata.ClassAndInterfaces!
static StreamJsonRpc.RpcTargetMetadata.EnableDynamicEventHandlerCreation() -> void
static StreamJsonRpc.RpcTargetMetadata.FromClass(System.Type! classType) -> StreamJsonRpc.RpcTargetMetadata!
static StreamJsonRpc.RpcTargetMetadata.FromClass(System.Type! classType, StreamJsonRpc.RpcTargetMetadata.ClassAndInterfaces! metadata) -> StreamJsonRpc.RpcTargetMetadata!
static StreamJsonRpc.RpcTargetMetadata.FromClassNonPublic(System.Type! classType) -> StreamJsonRpc.RpcTargetMetadata!
static StreamJsonRpc.RpcTargetMetadata.FromClassNonPublic(System.Type! classType, StreamJsonRpc.RpcTargetMetadata.ClassAndInterfaces! metadata) -> StreamJsonRpc.RpcTargetMetadata!
static StreamJsonRpc.RpcTargetMetadata.FromInterface(StreamJsonRpc.RpcTargetMetadata.InterfaceCollection! interfaces) -> StreamJsonRpc.RpcTargetMetadata!
static StreamJsonRpc.RpcTargetMetadata.FromInterface(System.Type! rpcContract) -> StreamJsonRpc.RpcTargetMetadata!
static StreamJsonRpc.RpcTargetMetadata.RegisterEventArgs<TEventArgs>() -> void
StreamJsonRpc.ExportRpcContractProxiesAttribute
StreamJsonRpc.ExportRpcContractProxiesAttribute.ExportRpcContractProxiesAttribute() -> void
StreamJsonRpc.ExportRpcContractProxiesAttribute.ForbidExternalProxyGeneration.get -> bool
StreamJsonRpc.ExportRpcContractProxiesAttribute.ForbidExternalProxyGeneration.set -> void
StreamJsonRpc.IJsonRpcClientProxy.As<T>() -> T?
StreamJsonRpc.JsonRpc.AddLocalRpcTarget(StreamJsonRpc.RpcTargetMetadata! exposingMembersOn, object! target, StreamJsonRpc.JsonRpcTargetOptions? options) -> void
override StreamJsonRpc.NerdbankMessagePackFormatter.AsyncEnumerableConverter<T>.GetJsonSchema(Nerdbank.MessagePack.JsonSchemaContext! context, PolyType.Abstractions.ITypeShape! typeShape) -> System.Text.Json.Nodes.JsonObject?
override StreamJsonRpc.NerdbankMessagePackFormatter.AsyncEnumerableConverter<T>.Read(ref Nerdbank.MessagePack.MessagePackReader reader, Nerdbank.MessagePack.SerializationContext context) -> System.Collections.Generic.IAsyncEnumerable<T>?
override StreamJsonRpc.NerdbankMessagePackFormatter.AsyncEnumerableConverter<T>.Write(ref Nerdbank.MessagePack.MessagePackWriter writer, in System.Collections.Generic.IAsyncEnumerable<T>? value, Nerdbank.MessagePack.SerializationContext context) -> void
static readonly StreamJsonRpc.NerdbankMessagePackFormatter.DefaultSerializer -> Nerdbank.MessagePack.MessagePackSerializer!
StreamJsonRpc.JsonRpc.Attach(System.ReadOnlySpan<System.Type!> interfaceTypes, StreamJsonRpc.JsonRpcProxyOptions? options) -> object!
StreamJsonRpc.JsonRpc.InvokeWithParameterObjectAsync(string! targetName, StreamJsonRpc.NamedArgs? argument = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
StreamJsonRpc.JsonRpc.InvokeWithParameterObjectAsync(string! targetName, System.Collections.Generic.IReadOnlyDictionary<string!, object?>? argument, System.Collections.Generic.IReadOnlyDictionary<string!, System.Type!>? argumentDeclaredTypes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
StreamJsonRpc.JsonRpc.InvokeWithParameterObjectAsync<TResult>(string! targetName, StreamJsonRpc.NamedArgs? argument = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>!
StreamJsonRpc.JsonRpc.InvokeWithParameterObjectAsync<TResult>(string! targetName, System.Collections.Generic.IReadOnlyDictionary<string!, object?>? argument, System.Collections.Generic.IReadOnlyDictionary<string!, System.Type!>? argumentDeclaredTypes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TResult>!
StreamJsonRpc.JsonRpc.LoadableTypes.get -> StreamJsonRpc.LoadableTypeCollection
StreamJsonRpc.JsonRpc.NotifyWithParameterObjectAsync(string! targetName, StreamJsonRpc.NamedArgs? argument = null) -> System.Threading.Tasks.Task!
StreamJsonRpc.JsonRpc.NotifyWithParameterObjectAsync(string! targetName, System.Collections.Generic.IReadOnlyDictionary<string!, object?>? namedArguments, System.Collections.Generic.IReadOnlyDictionary<string!, System.Type!>? argumentDeclaredTypes) -> System.Threading.Tasks.Task!
StreamJsonRpc.JsonRpcContractAttribute
StreamJsonRpc.JsonRpcContractAttribute.JsonRpcContractAttribute() -> void
StreamJsonRpc.JsonRpcProxyInterfaceGroupAttribute
StreamJsonRpc.JsonRpcProxyInterfaceGroupAttribute.AdditionalInterfaces.get -> System.ReadOnlyMemory<System.Type!>
StreamJsonRpc.JsonRpcProxyInterfaceGroupAttribute.JsonRpcProxyInterfaceGroupAttribute(params System.Type![]! additionalInterfaces) -> void
StreamJsonRpc.JsonRpcProxyOptions.AcceptProxyWithExtraInterfaces.get -> bool
StreamJsonRpc.JsonRpcProxyOptions.AcceptProxyWithExtraInterfaces.set -> void
StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation
StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation.AlwaysDynamic = 0 -> StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation
StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation.AlwaysSourceGenerated = 2 -> StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation
StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation.PreferSourceGenerated = 1 -> StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation
StreamJsonRpc.JsonRpcProxyOptions.ProxySource.get -> StreamJsonRpc.JsonRpcProxyOptions.ProxyImplementation
StreamJsonRpc.JsonRpcProxyOptions.ProxySource.set -> void
StreamJsonRpc.LoadableTypeCollection
StreamJsonRpc.LoadableTypeCollection.Add(System.Type! type) -> StreamJsonRpc.LoadableTypeCollection
StreamJsonRpc.LoadableTypeCollection.Count.get -> int
StreamJsonRpc.LoadableTypeCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Type!>!
StreamJsonRpc.LoadableTypeCollection.LoadableTypeCollection() -> void
StreamJsonRpc.NamedArgs
StreamJsonRpc.NamedArgs.DeclaredArgumentTypes.get -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Type!>!
StreamJsonRpc.Reflection.JsonRpcProxyMappingAttribute
StreamJsonRpc.Reflection.JsonRpcProxyMappingAttribute.ProxyClass.get -> System.Type!
StreamJsonRpc.Reflection.JsonRpcProxyMappingAttribute.JsonRpcProxyMappingAttribute(System.Type! proxyClass) -> void
StreamJsonRpc.Reflection.ProxyBase
StreamJsonRpc.Reflection.ProxyBase.As<T>() -> T?
StreamJsonRpc.Reflection.ProxyBase.CalledMethod -> System.EventHandler<string!>?
StreamJsonRpc.Reflection.ProxyBase.CallingMethod -> System.EventHandler<string!>?
StreamJsonRpc.Reflection.ProxyBase.Dispose() -> void
StreamJsonRpc.Reflection.ProxyBase.IsDisposed.get -> bool
StreamJsonRpc.Reflection.ProxyBase.JsonRpc.get -> StreamJsonRpc.JsonRpc!
StreamJsonRpc.Reflection.ProxyBase.OnCalledMethod(string! method) -> void
StreamJsonRpc.Reflection.ProxyBase.OnCallingMethod(string! method) -> void
StreamJsonRpc.Reflection.ProxyBase.Options.get -> StreamJsonRpc.JsonRpcProxyOptions!
StreamJsonRpc.JsonRpc.TraceEvents.IFormatterConverterDeserializationFailure = 22 -> StreamJsonRpc.JsonRpc.TraceEvents
StreamJsonRpc.NerdbankMessagePackFormatter
StreamJsonRpc.NerdbankMessagePackFormatter.AsyncEnumerableConverter<T>
StreamJsonRpc.NerdbankMessagePackFormatter.AsyncEnumerableConverter<T>.AsyncEnumerableConverter() -> void
StreamJsonRpc.NerdbankMessagePackFormatter.Deserialize(System.Buffers.ReadOnlySequence<byte> contentBuffer) -> StreamJsonRpc.Protocol.JsonRpcMessage!
StreamJsonRpc.NerdbankMessagePackFormatter.GetJsonText(StreamJsonRpc.Protocol.JsonRpcMessage! message) -> object!
StreamJsonRpc.NerdbankMessagePackFormatter.NerdbankMessagePackFormatter() -> void
StreamJsonRpc.NerdbankMessagePackFormatter.Serialize(System.Buffers.IBufferWriter<byte>! bufferWriter, StreamJsonRpc.Protocol.JsonRpcMessage! message) -> void
StreamJsonRpc.NerdbankMessagePackFormatter.TypeShapeProvider.get -> PolyType.ITypeShapeProvider!
StreamJsonRpc.NerdbankMessagePackFormatter.TypeShapeProvider.init -> void
StreamJsonRpc.NerdbankMessagePackFormatter.UserDataSerializer.get -> Nerdbank.MessagePack.MessagePackSerializer!
StreamJsonRpc.NerdbankMessagePackFormatter.UserDataSerializer.init -> void
StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.EnumeratorResults<T>
StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.EnumeratorResults<T>.EnumeratorResults() -> void
StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.EnumeratorResults<T>.Finished.get -> bool
StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.EnumeratorResults<T>.Finished.init -> void
StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.EnumeratorResults<T>.Values.get -> System.Collections.Generic.IReadOnlyList<T>?
StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.EnumeratorResults<T>.Values.init -> void
StreamJsonRpc.Reflection.ProxyBase.ProxyBase(StreamJsonRpc.JsonRpc! client, in StreamJsonRpc.Reflection.ProxyInputs inputs) -> void
StreamJsonRpc.Reflection.ProxyInputs
StreamJsonRpc.Reflection.ProxyInputs.AdditionalContractInterfaces.get -> System.ReadOnlyMemory<System.Type!>
StreamJsonRpc.Reflection.ProxyInputs.AdditionalContractInterfaces.init -> void
StreamJsonRpc.Reflection.ProxyInputs.ContractInterface.get -> System.Type!
StreamJsonRpc.Reflection.ProxyInputs.ContractInterface.init -> void
StreamJsonRpc.Reflection.ProxyInputs.Options.get -> StreamJsonRpc.JsonRpcProxyOptions?
StreamJsonRpc.Reflection.ProxyInputs.Options.init -> void
StreamJsonRpc.Reflection.ProxyInputs.ProxyInputs() -> void
StreamJsonRpc.RpcTargetMetadata
StreamJsonRpc.RpcTargetMetadata.ClassAndInterfaces
StreamJsonRpc.RpcTargetMetadata.ClassAndInterfaces.Add(System.Type! iface) -> void
StreamJsonRpc.RpcTargetMetadata.ClassAndInterfaces.ClassAndInterfaces(System.Type! classType) -> void
StreamJsonRpc.RpcTargetMetadata.CreateEventHandlerDelegate
StreamJsonRpc.RpcTargetMetadata.EventMetadata
StreamJsonRpc.RpcTargetMetadata.EventMetadata.CreateEventHandler.get -> StreamJsonRpc.RpcTargetMetadata.CreateEventHandlerDelegate!
StreamJsonRpc.RpcTargetMetadata.EventMetadata.CreateEventHandler.init -> void
StreamJsonRpc.RpcTargetMetadata.EventMetadata.Event.get -> System.Reflection.EventInfo!
StreamJsonRpc.RpcTargetMetadata.EventMetadata.Event.init -> void
StreamJsonRpc.RpcTargetMetadata.EventMetadata.EventHandlerType.get -> System.Type!
StreamJsonRpc.RpcTargetMetadata.EventMetadata.EventHandlerType.init -> void
StreamJsonRpc.RpcTargetMetadata.EventMetadata.EventMetadata() -> void
StreamJsonRpc.RpcTargetMetadata.EventMetadata.Name.get -> string!
StreamJsonRpc.RpcTargetMetadata.EventMetadata.Name.init -> void
StreamJsonRpc.RpcTargetMetadata.Events.get -> System.Collections.Generic.IReadOnlyList<StreamJsonRpc.RpcTargetMetadata.EventMetadata!>!
StreamJsonRpc.RpcTargetMetadata.Events.init -> void
StreamJsonRpc.RpcTargetMetadata.InterfaceCollection
StreamJsonRpc.RpcTargetMetadata.InterfaceCollection.Add(System.Type! iface) -> void
StreamJsonRpc.RpcTargetMetadata.InterfaceCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Type!>!
StreamJsonRpc.RpcTargetMetadata.InterfaceCollection.InterfaceCollection(System.Type! primaryInterface) -> void
StreamJsonRpc.RpcTargetMetadata.Methods.get -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata!>!>!
StreamJsonRpc.RpcTargetMetadata.Methods.init -> void
StreamJsonRpc.RpcTargetMetadata.RpcTargetMetadata() -> void
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.Attribute.get -> StreamJsonRpc.JsonRpcMethodAttribute?
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.Attribute.init -> void
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.Method.get -> System.Reflection.MethodInfo!
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.Method.init -> void
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.Name.get -> string!
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.Name.init -> void
StreamJsonRpc.RpcTargetMetadata.TargetMethodMetadata.TargetMethodMetadata() -> void
StreamJsonRpc.RpcTargetMetadata.TargetType.get -> System.Type!
StreamJsonRpc.RpcTargetMetadata.TargetType.init -> void
virtual StreamJsonRpc.RpcTargetMetadata.CreateEventHandlerDelegate.Invoke(StreamJsonRpc.JsonRpc! rpc, string! eventName) -> System.Delegate!
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressProxy<T>
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressProxy<T>.ProgressProxy(StreamJsonRpc.JsonRpc! rpc, object! token, bool useNamedArguments) -> void
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressProxy<T>.Report(T value) -> void
virtual StreamJsonRpc.JsonRpc.LoadTypeTrimSafe(string! typeFullName, string? assemblyName) -> System.Type?
