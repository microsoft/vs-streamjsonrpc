<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StreamJsonRpc0011_MessageFormat" xml:space="preserve">
    <value>The return type {0} on {1} is not supported in RPC methods.</value>
  </data>
  <data name="StreamJsonRpc0011_Title" xml:space="preserve">
    <value>Supported return types</value>
  </data>
  <data name="StreamJsonRpc0001_MessageFormat" xml:space="preserve">
    <value>RPC contract {0} must be declared with at least `internal` visibility.</value>
  </data>
  <data name="StreamJsonRpc0001_Title" xml:space="preserve">
    <value>Accessible interface</value>
  </data>
  <data name="StreamJsonRpc0012_Title" xml:space="preserve">
    <value>Unsupported member</value>
  </data>
  <data name="StreamJsonRpc0012_MessageFormat" xml:space="preserve">
    <value>RPC contract {0} may not declare unsupported member {1}.</value>
  </data>
  <data name="StreamJsonRpc0013_Title" xml:space="preserve">
    <value>No generic methods</value>
  </data>
  <data name="StreamJsonRpc0013_MessageFormat" xml:space="preserve">
    <value>RPC contract {0} may not include generic method {1}.</value>
  </data>
  <data name="StreamJsonRpc0014_MessageFormat" xml:space="preserve">
    <value>RPC contract {0} method {1} may declare CancellationToken only as the last parameter.</value>
  </data>
  <data name="StreamJsonRpc0014_Title" xml:space="preserve">
    <value>CancellationToken as last parameter</value>
  </data>
  <data name="StreamJsonRpc0015_Title" xml:space="preserve">
    <value>No generic interfaces</value>
  </data>
  <data name="StreamJsonRpc0015_MessageFormat" xml:space="preserve">
    <value>RPC contracts may not be declared with generic interfaces.</value>
  </data>
  <data name="StreamJsonRpc0016_Title" xml:space="preserve">
    <value>Unsupported event delegate</value>
  </data>
  <data name="StreamJsonRpc0016_MessageFormat" xml:space="preserve">
    <value>RPC contract events must be declared with either `EventHandler` or `EventHandler&lt;T&gt;` delegate types.</value>
  </data>
  <data name="StreamJsonRpc0002_Title" xml:space="preserve">
    <value>Declare partial interface</value>
  </data>
  <data name="StreamJsonRpc0002_MessageFormat" xml:space="preserve">
    <value>RPC contract interface {0} should be declared as partial to enable source generated proxies to be discovered at runtime, but the following type(s) are not partial: {1}</value>
  </data>
  <data name="StreamJsonRpc0005_Title" xml:space="preserve">
    <value>RpcMarshalable are IDisposable</value>
  </data>
  <data name="StreamJsonRpc0005_MessageFormat" xml:space="preserve">
    <value>RpcMarshalable interface {0} must derive from IDisposable or have a call-scoped lifetime.</value>
  </data>
  <data name="StreamJsonRpc0007_Title" xml:space="preserve">
    <value>Use RpcMarshalableAttribute on optional marshalable interface</value>
  </data>
  <data name="StreamJsonRpc0007_MessageFormat" xml:space="preserve">
    <value>RpcMarshalable optional interface {0} must be attributed with [RpcMarshalableAttribute(IsOptional = true)].</value>
  </data>
  <data name="StreamJsonRpc0006_Title" xml:space="preserve">
    <value>Interfaces in proxy group must be attributed</value>
  </data>
  <data name="StreamJsonRpc0006_MessageFormat" xml:space="preserve">
    <value>All interfaces identified by a JsonRpcProxyInterfaceGroupAttribute must bear the JsonRpcContractAttribute, but the following interface(s) do not: {0}.</value>
  </data>
  <data name="StreamJsonRpc0003_Title" xml:space="preserve">
    <value>Use JsonRpcContractAttribute</value>
  </data>
  <data name="StreamJsonRpc0003_MessageFormat" xml:space="preserve">
    <value>Apply the JsonRpcContractAttribute to {0} for better analysis and higher runtime performance.</value>
  </data>
  <data name="StreamJsonRpc0004_Title" xml:space="preserve">
    <value>Use interfaces for proxies</value>
  </data>
  <data name="StreamJsonRpc0004_MessageFormat" xml:space="preserve">
    <value>Proxies may only be produced for interfaces that are not open-generics, but {0} is not an interface or is an open generic.</value>
  </data>
  <data name="StreamJsonRpc0008_Title" xml:space="preserve">
    <value>Add methods to PolyType shape for RPC contract interface</value>
  </data>
  <data name="StreamJsonRpc0008_MessageFormat" xml:space="preserve">
    <value>The RPC contract type '{0}' should also have the {1} applied so that it works with more formatters.</value>
  </data>
  <data name="StreamJsonRpc0009_Title" xml:space="preserve">
    <value>Use GenerateShapeAttribute on optional marshalable interface</value>
  </data>
  <data name="StreamJsonRpc0009_MessageFormat" xml:space="preserve">
    <value>The type '{0}' should use {1} since it is an optional RPC marshalable contract type.</value>
  </data>
  <data name="StreamJsonRpc0030_Title" xml:space="preserve">
    <value>JsonRpcProxyAttribute&lt;T&gt; should be applied only to generic interfaces</value>
  </data>
  <data name="StreamJsonRpc0031_Title" xml:space="preserve">
    <value>JsonRpcProxyAttribute&lt;T&gt; type argument should be a closed instance of the applied type</value>
  </data>
  <data name="StreamJsonRpc0032_Title" xml:space="preserve">
    <value>JsonRpcProxyAttribute&lt;T&gt; should be accompanied by JsonRpcContractAttribute or RpcMarshalableAttribute.</value>
  </data>
  <data name="StreamJsonRpc0030_MessageFormat" xml:space="preserve">
    <value>JsonRpcProxyAttribute&lt;T&gt; should be applied only to generic interfaces, but {0} is not a generic interface.</value>
  </data>
  <data name="StreamJsonRpc0031_MessageFormat" xml:space="preserve">
    <value>JsonRpcProxyAttribute&lt;T&gt; type argument should be a closed instance of the applied type, but {0} has this attribute applied with {1} as a type argument.</value>
  </data>
  <data name="StreamJsonRpc0032_MessageFormat" xml:space="preserve">
    <value>JsonRpcProxyAttribute&lt;T&gt; should be accompanied by either JsonRpcContractAttribute or RpcMarshalableAttribute, but {0} has neither of these applied.</value>
  </data>
  <data name="StreamJsonRpc0050_Title" xml:space="preserve">
    <value>Use IClientProxy.Is or JsonRpcExtensions.As</value>
  </data>
  <data name="StreamJsonRpc0050_MessageFormat" xml:space="preserve">
    <value>Use IClientProxy.Is, JsonRpcExtensions.As or the source-generated extension methods by the same names on your RPC marshalable interfaces to cast or type check between RpcMarshalable interfaces {0} and {1}.</value>
  </data>
</root>
